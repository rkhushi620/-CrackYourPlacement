class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        //Brute force approch tle O(n3)

        // int c=0;
        // for(int i=0;i<nums.length;i++){
        //     int sum=0;
        //     for(int j=i;j<nums.length;j++){
        //         sum+=nums[j];O(n)   //sum=(i==0)?nums[j]:nums[j]-nums[i-1];O(1)
        //         System.out.println(sum);
        //         if(sum%k==0)
        //         c++;
        //     }
        // }
        // return c;

        int res=0;
        HashMap<Integer,Integer> hm=new HashMap<>();
        int sum=0;
        for(int i=0;i<nums.length;i++){
            if(hm.size()==0){
                hm.put(0,1);

            }
            sum+=nums[i];
           
             if(sum%k<0)
            {
                int rem=(sum%k)+k;
                if(hm.containsKey(rem))
                {
                     res+=hm.get(rem);
                    hm.put(rem,hm.get(rem)+1);
                }
                else{
                    hm.put(rem,1);
                }
            }
            else{
                if(hm.containsKey(sum%k))
                {
                     res+=hm.get(sum%k);
                    hm.put(sum%k,hm.get(sum%k)+1);
                   
                }
                else{
                    hm.put(sum%k,1);
                }
            }
        }
        return res;
    }
}
